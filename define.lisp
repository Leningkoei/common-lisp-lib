(defmacro funcall* (func &rest args)
  `(funcall ,func ,func ,@args))
(defmacro define (defines &body body)
  (let ((map-handle
         (lambda (define)
           (let ((define-name (car  define))
                 (define-body (cadr define)))
             (if (not (listp define-body)) `(,define-name ,define-body)
               (let ((define-ex (car define-body)))
                 (if (not (equal 'lambda* define-ex))
                     `(,define-name ,define-body)
                   (let ((func-args (nth 1 define-body))
                         (func-body (subseq define-body 2 nil)))
                     `(,define-name
                        (lambda (,define-name ,@func-args) ,@func-body))))))))))
    (let ((defines-kai (map 'list map-handle defines)))
      `(let (,@defines-kai) ,@body))))
;; (defun test ()
;;   (let ((test '(define ((func1 (lambda* (a) (print func1) (print a)))
;;                         (func2 (lambda  (b) (print b)))
;;                         (var1 1)
;;                         (var2 (+ 1 2)))
;;                  (funcall* func1 1)
;;                  (funcall  func2 2)
;;                  (print var1)
;;                  (print var2))))
;;     (print (macroexpand test))
;;     (eval test))
;;   nil)
